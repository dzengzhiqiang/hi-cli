#!/bin/bash
###############################################################################
# Project: hi-cli
# Description: The cross platform development toolkit - hi-cli
# Author: John Deng (john.deng@outlook.com)
#
# Copyright (c) 2014-2017 John Deng (john.deng@outlook.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Author: John Deng (john.deng@outlook.com)
# Updated: Sun Mar 26 23:19:45 CST 2017
# Module: package
# Submodule: 
# Command: install
###############################################################################

source "${HI_CLI_HOME}/bin/colors"
source "${HI_CLI_HOME}/bin/clap"
source "${HI_CLI_HOME}/bin/logging"
###############################################################################
function do_update() {
  l_app_name="$1"
  l_app_dir="$2"

  pushd "${l_app_dir}" > /dev/null 2>&1
  log_debug "$PWD"

  l_branch=$(git branch | grep "*" | sed "s/* //g")
  git fetch > /dev/null 2>&1
  if (( $(git diff --name-only origin/${l_branch} | wc -l) > 0 )); then
    get_file_from_path running_app_name "$0"
    if [ "${l_app_dir}" == "${HI_CLI_HOME}" ] && [ "${running_app_name}" != "hi-update" ]; then
      log_info "Prepare to update hi-cli ..."
      cp ${HI_CLI_HOME}/bin/hi /tmp/hi-update
      chmod 755 /tmp/hi-update
      export hide_version=hide_version
      exec /tmp/hi-update update 
      exit 0
    fi
    
    log_info "Found new version, updating ..."
    git branch --set-upstream-to=origin/${l_branch} > /dev/null 2>&1
    git pull --force > /dev/null 2>&1
    result=$?
    log_info "${l_app_name} is up to date"
  else
    log_info "${l_app_name} is already the latest version"
    result=$?
  fi

  popd > /dev/null 2>&1

  return ${result}
}

function update_hi_cli() {

  do_update "hi-cli" "${HI_CLI_HOME}"

  return $?
}

function update_package() {
  log_info "update hi-cli package $1 ..."

  do_update "$1" "${HI_CLI_HOME}/modules/${package}" 

  return $?
}


function update_all() {

  update_hi_cli

  ls /usr/local/hi-cli/modules | while read package; do
    update_package $package
  done

  result=$?

  return $result
}

function run() {
  cli="hi update"
  
  if [ "${arg2}" == "all" ]; then
    update_all
  elif [ "${arg2}" != "" ] && [ "${arg2}" != "debug" ]; then
    update_package $arg2
  else
    update_hi_cli
  fi
  result=$?

  eval $1="\${result}"
  eval $2="\${cli}"
}

###############################################################################
