#!/bin/bash
###############################################################################
# Project: hi-cli
# Description: The cross platform development toolkit - hi-cli
# Author: John Deng (john.deng@outlook.com)
#
# Copyright (c) 2014-2017 John Deng (john.deng@outlook.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Author: John Deng (john.deng@outlook.com)
# Updated: 2017-02-11
###############################################################################

source "${HI_CLI_HOME}/bin/colors"

function prompt_yesorno ()
{
    while true; do
        ${ECHO_E} "${YELLOW}"
        read -p "[hi-cli] $1 " yn < /dev/tty
        ${ECHO_E} "${ENDCOLOR}"
        case $yn in
            [Yy]* ) return 0;;
            [Nn]* ) return 1;;
            * ) echo "Please answer yes or no.";;
        esac
    done
}

function parse_json() {
  export PYTHONIOENCODING=utf8
  keys=
  args=("$@")
  
  for((i=0;i<$#;i++));
  do
    if [ $i != 0 ] && [ $i != 1 ];
    then
      keys="${keys}['${args[$i]}']"
      log_debug "$i : ${args[$i]}"
    fi
  done
  log_debug ${keys}

  value=$(echo $2 | python -c "import sys, json; sys.tracebacklimit = 0; print json.load(sys.stdin)${keys}" )
  log_debug ${value}
  
  eval $1="\${value}"
}

function get_file_from_path() {
  src=$2
  eval $1="${src##*/}"
}

function get_folder_from_path() {
  src=$2
  eval $1="${src##*/}"
}

function get_dir_from_path() {
  src="$2"
  eval $1="\${src%/*}"
}

function is_function() {
  #if type "$1" | grep -q '^function$' 2>/dev/null; then
  if [ $(type "$1" | grep "function" | wc -l) != 0 ]; then
    echo "yes"
  else
    echo "no"
  fi

}

function get_url_status() {
  response=$(curl -IL "$1")
  status_code=$(echo $response | grep Status)
  echo ${status_code/Status: /}
}

function is_url_available() {
  if [ $(get_url_status $1 | grep '200' | wc -l) != 0 ]; then
    echo "yes"
  else
    echo "no"
  fi
}

function is_connected() {
  host=$1
  port=$2
  res=$(echo $(telnet ${host} ${port} &) | grep "Escape character is '^]'." | wc -l)
  [ ${res} == 1 ] && echo "yes" || echo "no" 
}

function find_modules() {
  file_extension="$2"
  log_debug "find_modules in $PWD, file_extension: ${file_extension}"
  result=$(find . -maxdepth 2 -name "${file_extension}" | { while read module; do
      
      module=${module%:*}
      module=${module/.\//}
      module=${module/\/${file_extension}/}
      if [ "${unlimited}" == "unlimited" ] || [ $(echo "${module}" | grep "\/" | wc -l) == 0 ]; then
          echo ${SPACE}${module}
      fi
  done
  })

  # log_debug "result: ${result}"

  eval " $1="'"'"$result"'"'" "
}
